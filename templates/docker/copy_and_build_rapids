# Assume the RAPIDS repos have been cloned to the 'rapids' dir.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
# FIXME: FYI, the container build process is now also cloning.
#:#
#:# Note: an alternative proposal is to clone the repos as part of the
#:# image building step, instead of ahead of time using the host
#:# machine. This will require git to be installed in the image, but
#:# would allow the host to not require it
RUN mkdir -p ${RAPIDS_SRC_DIR}
COPY rapids ${RAPIDS_SRC_DIR}
COPY utils ${RAPIDS_SRC_DIR}/${UTILS_DIR}

RUN cd ${RAPIDS_SRC_DIR} && ./clone.sh

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
#:#
#:# This is only in place to allow individual RAPIDS comps to be built
#:# one-at-a-time, to allow for better caching (if a comp fails to build then
#:# all prior successful builds are cached). If this isn't needed, then simply
#:# put a call to build.sh here (build.sh, with no args, builds all comps in
#:# the rapids dir). dumpDockerRapidsBuildCmds.sh will insert the individual
#:# calls to build.sh based on the RAPIDS comps in config
runcommand ../../commands/utils/dumpDockerRapidsBuildCmds.sh

# Add test file for testing from within the container
COPY ${SUPPORT_FILES_DIR}/test.sh /test.sh
